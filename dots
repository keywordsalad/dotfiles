#!/usr/bin/env python3
'''
This script is used to create symlinks from the home directory to dotfiles as
configured via dotsfiles.

USAGE:
------
./dots [dotsfile...]
./dots macos
./dots linux haskell-config

TERMINOLOGY:
------------
home directory  :  ~
local directory :  ~/local
this directory  :  ./

WHAT IS A DOTSFILE?
---------------------
A dotsfile is a simple text file of arbitrary name that contains lines of the
form:

SRC,DST
- or -
SRC

Where SRC is the path to a file in this directory and DST is the path in the
home directory. SRC may also refer to a file in the local directory, and this
file takes precedence over one in this directory. Both SRC and DST are relative
to the this, local, and home directories, so specifying an absolute path
will not work.

If DST is not specified, it is assumed to be the same as SRC. Empty lines and
lines starting with '#' are ignored.

Dotsfiles can be specified in the following locations:

    * In the local directory at ~/local/dotsfiles/
    * In this directory at ./dotsfiles/

Dotsfiles override other dotsfiles by specifying the same DST. Dotsfiles are
applied in this order, with the later dotsfiles overriding the previous ones.

    1. ./dotsfiles/default
    3. ~/local/dotsfiles/default
    2. ./dotsfiles/<filename>
    4. ~/local/dotsfiles/<filename>

The default dotsfiles are automatically applied, thus they are used if there
are no other dotsfiles specified, and automatically inserted at the beginning
of the list of dotsfiles. Don't insert them manually.

A dotsfile in this directory may be overridden wholesale by specifying one of
the same name in the local directory.
'''

import sys
from os import makedirs, path, symlink

user_dir = path.expanduser('~')
local_dir = path.join(user_dir, 'local')
dotfiles_dir = path.dirname(path.realpath(__file__))

def dots(filenames):
    dotsfile_paths = resolve_default_dotsfile_paths() + [resolve_dotsfile_path(filename) for filename in filenames]
    links = {}
    for dotsfile_path in dotsfile_paths:
        with open(dotsfile_path, 'r') as dotsfile:
            # Read the dotsfile and merge it into the links dictionary,
            # overriding any links that are already present.
            links = dict(links, **read_dotsfile(dotsfile))

    for dst, src in links.items():
        create_link(dst, src)

# Returns the path to the dotsfile with the given name. If the dotsfile exists
# in the local directory, it is returned. Otherwise, the dotsfile in this
# directory is returned.
def resolve_dotsfile_path(filename):
    local_dotsfile_path = get_local_dotsfile_path(filename)
    dotsfile_path = get_this_dotsfile_path(filename)
    if path.exists(local_dotsfile_path):
        return local_dotsfile_path
    elif path.exists(dotsfile_path):
        return dotsfile_path
    else:
        raise Exception(f'Linksfile {filename} not found')

# The the default dotsfiles if they exist.
def resolve_default_dotsfile_paths():
    return [x for x in [get_this_dotsfile_path('default'),
                        get_local_dotsfile_path('default')]
              if path.exists(x)]

# Returns the path to the dotsfile that would be within this directory.
def get_this_dotsfile_path(filename):
    return path.realpath(path.join('dotsfiles', filename))

# Returns the path to the dotsfile that would be within the local directory.
def get_local_dotsfile_path(filename):
    return path.realpath(path.join(local_dir, 'dotsfiles', filename))

# Reads a dotsfile and returns a dictionary of links, keyed by the dst in the
# home directory.
def read_dotsfile(dotsfile):
    link_pairs = []
    for line in dotsfile.readlines():
        line = line.strip()
        if line.startswith('#') or len(line) == 0:
            continue
        pair = [e.strip() for e in line.split(',')]
        link_pairs.append(resolve_src_dst(*pair))

    return dict(link_pairs)

def resolve_src_dst(src, dst = None):
    src = src.strip()
    dst = dst.strip() if dst else None

    src_override = path.join(local_dir, src)
    src_provided = path.join(dotfiles_dir, src)
    src_absolute = src_override if path.exists(src_override) else src_provided
    dst_absolute = path.join(user_dir, dst) if dst else path.join(user_dir, src)

    # Flip dst and src so that links may be keyed by the dst in the home
    # directory. This allows dotsfiles applied later to override links provided
    # earlier.
    return [dst_absolute, src_absolute]

def create_link(dst, src):
    print(f'[info] Processing link {dst} => {src}')
    if path.islink(dst):
        print(f'[info] Skipping: already linked')
    elif path.exists(dst):
        print(f'[error] Skipping: file already exists')
    else:
        print(f'[info] Linking')
        makedirs(path.dirname(dst), exist_ok=True)
        symlink(src, dst)
    print()

if __name__ == '__main__':
    dots(sys.argv[1:])
