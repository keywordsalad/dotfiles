#!/usr/bin/env python3

import sys
from os import makedirs, path, symlink

user_dir = path.expanduser('~')
local_dir = path.join(user_dir, 'local')
dotfiles_dir = path.dirname(path.realpath(__file__))

def read_config_file(config_file):
    def resolve_source_and_link(source_file, link_file = None):
        source_file = source_file.strip()
        link_file = link_file.strip() if link_file else None

        source_file_override = path.join(local_dir, source_file)
        source_file_provided = path.join(dotfiles_dir, source_file)
        source_file_absolute = source_file_override if path.exists(source_file_override) else source_file_provided
        link_file_absolute = path.join(user_dir, link_file) if link_file else path.join(user_dir, source_file)

        return [link_file_absolute, source_file_absolute]

    link_pairs = []
    for line in config_file.readlines():
        line = line.strip()
        if line.startswith('#') or len(line) == 0:
            continue
        pair = [e.strip() for e in line.split(',')]
        link_pairs.append(resolve_source_and_link(*pair))

    return dict(link_pairs)

def create_link(link_file, source_file):
    print(f'[info] Processing link {link_file} => {source_file}')
    if path.islink(link_file):
        print(f'[info] Skipping: already linked')
    elif path.exists(link_file):
        print(f'[error] Skipping: file already exists')
    else:
        print(f'[info] Linking')
        makedirs(path.dirname(link_file), exist_ok=True)
        symlink(source_file, link_file)
    print()

if __name__ == '__main__':
    def link_path(filename):
        return path.realpath(path.join('links', filename))

    link_files = [link_path(filename) for filename in sys.argv[1:]]
    link_files.insert(0, link_path('default'))

    local_links = path.join(local_dir, 'links')
    if path.isfile(local_links):
        link_files.append(local_links)

    links = {}
    for link_file in link_files:
        with open(link_file, 'r') as config_file:
            links |= read_config_file(config_file)

    for link, source in links.items():
        create_link(link, source)

